@import url('modal.css');
@import url('accordian.css');

@import url('font/style.css');
body, input {
    font-family: 'action_man', sans-serif;
}

*::before, *::after {
    font-family: 'action_man', sans-serif;
}

/* this file should contain widely used styles */

body {
    overflow: hidden;
    background: #000;
}

#canvas {
    width: 100%; 
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    border: none;
    background: rgb(70, 128, 151);
}

#stats {
    z-index: 1;
    position: absolute;
    border:solid 2px black;
    border-radius: .25em;
    top: .2em;
    left: .2em;
    background: rgb(0, 0, 0, .2);
    padding: 2px 3px;
    user-select: none;
    padding-bottom: 0;
}

#skill-container {
    display: flex;
    bottom: 1.5em;
    left: 0;
    width: 100%;
    z-index: 1;
    position: absolute;
    justify-content: center;
}

.skill:not(:last-child) {
    margin-right: 3px;
}

/* display the skill in bottom bar */
.skill {
    width: 2.5em;
    height: 2.5em;
    border: 2px solid black;
    border-radius: .25em;
    position: relative;
    float: left;
}

.skill:before {
    content: '';
    display: inline-block;
    position: absolute;
    transition: height calc(1s * var(--cd)) linear;
    width: 100%;
    background: rgb(0, 0, 0, .32);
    height: 0;
    bottom: 0;
}

.skill.cooldown:before {
    animation: cooldown calc(1s * var(--cd)) linear 1;
}

.skill > *:not(div) {
    width: 100%;
    height: 100%;
    user-select: none;
    filter: invert();
}

.skill-title {
    word-wrap: none;
    white-space: nowrap;
    font-size: 1.2em;
    font-weight: bold;
    text-align: center;
}

.skill-hotkey {
    position: absolute;
    display: block;
    background: rgb(0 0 0 / 40%);
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    padding: 2px 3px;
    border-radius: .5em;
    color: white;
    text-transform: uppercase;
    font-family: monospace;
}

.skill-desc {
    min-width: 10em;
}

@keyframes cooldown {
    0% {
        height: 100%;
    }

    100% {
        height: 0;
    }
}

.box {
    width: calc(100% - 20px);
    margin: 10px;
    border: 1px solid gray;
    border-radius: 5px;
    padding: 5px;
    box-sizing: border-box;
    min-height: calc(1em + 10px);
    position: relative;
}

.box-header {
    width: calc(100% - 10px);
    border-bottom: 1px solid gray;
    font-size: 1.4em;
    margin-bottom: 5px;
}

.box-header.center {
    text-align: center; 
}

.left-align {
    float: left; 
    height: 1em;
}

.right-align {
    float: right; 
    height: 1em;
}

button {
    background: rgb(51, 51, 51);
    outline: none;
    border: 1px solid gray;
    color: white;
    border-radius: .25em;
}

button.overlay::after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
}

.hotkey-input {
    font-family: monospace;
    text-align: center;
    border-radius: .5em;
    outline: 2px gray dashed;
    border: none;
    background: rgba(110, 110, 110, 0.3);
    color: white;

    transition: outline-color .2s ease-in;
}

#menu {
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    display: none;
}

.full {
    position: absolute;
    width: 100%;
    height: 100%;
}

.tooltip {
    /** EXTERNAL VARIABLES */
    --border-color: rgb(100, 100, 100);


    /* store in vars so it is easier to make directional classes */
    --main-x: -50%;
    --main-y: calc(-100% - var(--triangle-size));
    --t-x: -50%;
    --t-y: 100%;

    --triangle-size: 10px;
    
    position: absolute;
    top: 0;
    left: 50%;
    border: 2px solid var(--border-color);
    border-radius: .25em;
    background: rgb(51, 51, 51);
    padding: 2px 4px;
    user-select: none;
    color: white;
    min-width: 5em;

    /* zero values have to be set so transitions works properly */
    transform: translate(-50%, 0) scale(0);
    opacity: 0;
    transition: 0.2s opacity cubic-bezier(0.175, 0.885, 0.32, 1.275),
                0.2s transform cubic-bezier(0.175, 0.885, 0.32, 1.275);

    z-index: 100;
    isolation: isolate;
}

.tooltip.auto-expand {
    word-wrap: none;
    white-space: nowrap;
}

/** make it easier to move cursor from on the hover element
onto the tooltip without the hover being disabled */
.tooltip.interactive::after {
    position: absolute;
    content: '';
    left: 50%;
    top: 100%;
    transform: translate(var(--t-x), 0);
    width: 100%;
    height: var(--triangle-size);
}

.tooltip:not(.interactive) {
    pointer-events: none;
}

.tooltip::before {
    position: absolute;
    content: '';

    bottom: 0;
    left: 50%;
    
    border-left: transparent solid var(--triangle-size);
    border-right: transparent solid var(--triangle-size);
    border-top: var(--border-color) solid var(--triangle-size);

    /* zero values have to be set so transitions works properly */
    transform: translate(0, 0) scale(0);
    opacity: 0;
    transition: 0.1s opacity cubic-bezier(0.175, 0.885, 0.32, 1.275),
                0.1s transform cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

/* skill tooltip */
.tooltip.skill-tooltip {
    --border-color: rgb(100, 100, 100, 1);
    
    /* background-clip: border-box;
    background-origin: border-box; */
    background-image: linear-gradient(0deg, var(--color, white) 0px, black 20px);
    padding-bottom: 10px;
    padding-left: 5px;
    padding-right: 5px;
    padding-top: 2px;

    box-shadow: 0px 0px 5px 5px black;
}
/* 
.tooltip.skill-tooltip > .skill-title {

} */    

.dragged > .tooltip {
    display: none;
    transition: none !important;
}

*:hover > .tooltip {
    opacity: 1;
    transform: translate(var(--main-x), var(--main-y)) scale(1);
}

*:hover > .tooltip::before {
    opacity: 1;
    transform: translate(var(--t-x), var(--t-y)) scale(1);
}

/* bottom tooltip */
.tooltip.bottom::before {
    border-bottom: rgb(100, 100, 100) solid var(--triangle-size);
    border-top: none;
}

.tooltip.bottom {
    --main-y: calc(100% + var(--triangle-size));
    --t-y: -100%;
    bottom: 0;
    top: unset;
}

.tooltip.bottom::before {
    bottom: unset;
    top: 0;
}

.darken {
    background: black;
    padding: 0 3px;
    border-radius: 0.25em;
}

.text-glow {
    --start: #e60073; 
    --end: #ff4da6;

    color: #fff;
    animation: text-glow 1s ease-in-out infinite alternate;
}

.box-glow {
    --start: #e60073; 
    --end: #ff4da6;

    color: #fff;
    animation: box-glow 1s ease-in-out infinite alternate;
}

@keyframes text-glow {
    from {
        text-shadow: 0 0 .125em #fff, 0 0 .25em #fff, 0 0 .375em var(--start), 0 0 .5em var(--start), 0 0 .625em var(--start), 0 0 .75em var(--start), 0 0 .875em var(--start);
    }
    to {
        text-shadow: 0 0 .25em #fff, 0 0 .375em var(--end), 0 0 .5em var(--end), 0 0 .625em var(--end), 0 0 .75em var(--end), 0 0 .875em var(--end), 0 0 1em var(--end);
    }
}

@keyframes box-glow {
    from {
        box-shadow: 0 0 .125em #fff, 0 0 .25em #fff, 0 0 .375em var(--start), 0 0 .5em var(--start), 0 0 .625em var(--start), 0 0 .75em var(--start), 0 0 .875em var(--start);
    }
    to {
        box-shadow: 0 0 .25em #fff, 0 0 .375em var(--end), 0 0 .5em var(--end), 0 0 .625em var(--end), 0 0 .75em var(--end), 0 0 .875em var(--end), 0 0 1em var(--end);
    }
}

.flash {
    animation: flash .75s ease-in-out infinite alternate;
}

@keyframes flash {
    0% { background: rgb(255 255 255 / 5%) }
    100% { background: rgb(255 255 255 / 15%) }
}

.skill-hotkey {
    user-select: none;
}

.casting {
    box-shadow: 0px 0px 3px 3px #fff;
}

.handdrawn-border {
    border-radius: 255px 15px 225px 15px/15px 225px 15px 255px;
}

span.unit {
    color:rgb(180, 180, 180)
}